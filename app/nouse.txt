
/*polygonsToMultiPart: function(polygons){
  return new Polygon({
    spatialReference: polygons[0].spatialReference,
    rings: polygons.reduce((parts, polygon) => {
      return polygon ? parts.concat(polygon.rings) : [];
    }, [])
  });
}*/


// RESET ASSET LAYERS WATER LEVEL //
/*const resetAssetLayers = () => {
  this.ASSETS_LAYERS.map(assetLayer => {
    view.whenLayerView(assetLayer).then(assetLayerView => {
      assetLayer.queryFeatures({ geometry: view.extent, outFields: ["OBJECTID", "water_level"] }).then(affectedFS => {
        const updatedFeatureInfos = affectedFS.features.map((nullFeature, nullFeatureIdx) => {
          return {
            attributes: {
              "OBJECTID": nullFeature.attributes.OBJECTID,
              "water_level": null
            }
          }
        });
        assetLayer.applyEdits({ updateFeatures: updatedFeatureInfos }).then(applyEditsResults => {
          console.info("RESET: ", applyEditsResults);
          assetLayer.refresh();
        });
      });
    });
  });
};*/

// WATER LEVEL RESET BUTTON //
/* const resetBtn = dom.byId("reset-btn");
 const updateRestBtn = () => {
   if(this.base.portal.user == null){
     domClass.add(resetBtn, "hide");
   } else {
     domClass.toggle(resetBtn, "hide", !this.base.portal.user.username.startsWith("jgrayson"));
   }
 };
 this.on("portal-user-change", updateRestBtn);
 on(resetBtn, "click", resetAssetLayers);
 updateRestBtn();*/

//const nullFeatureList = new Map();
/*const updateNullFeatures = () => {
         //if(assetLayer.visible && !this.isLayerOutsideScaleRange(assetLayer, view.scale)){
         if(!assetLayerView.suspended){
           return watchUtils.whenFalseOnce(assetLayerView, "updating").then(() => {

             const featuresQuery = assetLayerView.createQuery();
             featuresQuery.set({
               geometry: view.extent,
               where: "water_level IS NULL",
               returnGeometry: true
             });
             return assetLayerView.queryFeatures(featuresQuery).then(featureSet => {
               if(featureSet.features.length){

                 featureSet.features.forEach(feature => {
                   const oid = feature.attributes.OBJECTID;
                   if(!nullFeatureList.has(oid)){
                     nullFeatureList.set(oid, feature);
                   }
                 });

                 const nullFeatures = Array.from(nullFeatureList.values());
                 if(nullFeatures.length){

                   return this.analyzeWaterLevel({ layer: assetLayer, nullFeatures: nullFeatures }).then(updatedOIDs => {
                     if(updatedOIDs.length){

                       updatedOIDs.forEach(updatedOID => {
                         nullFeatureList.delete(updatedOID);
                       });

                       return watchUtils.whenTrueOnce(assetLayerView, "updating").then(() => {
                         return watchUtils.whenFalseOnce(assetLayerView, "updating").then(() => {
                           return updatedOIDs.length;
                         });
                       });
                     } else {
                       nullFeatureList.clear();
                       return promiseUtils.resolve(0);
                     }
                   });

                 } else {
                   return 0;
                 }
               } else {
                 return 0;
               }
             });
           });
         } else {
           return promiseUtils.resolve(0);
         }
       };*/


/*initializeWaterLevelOverlay: function(view){

     const waterLevelLayer = view.map.layers.find(layer => {
       return (layer.title === "SLR Water Level");
     });
     if(waterLevelLayer){

       return waterLevelLayer.load().then(() => {

         this.analyzeWaterLevel = ({ layer, nullFeatures }) => {

           const queryGeometry = new Multipoint({
             spatialReference: { "wkid": view.spatialReference.wkid },
             points: nullFeatures.map(feature => {
               return [feature.geometry.x, feature.geometry.y]
             })
           });

           return esriRequest(`${waterLevelLayer.url}/getSamples`, {
             query: {
               geometry: JSON.stringify(queryGeometry.toJSON()),
               geometryType: "esriGeometryMultipoint",
               returnFirstValueOnly: true,
               pixelSize: "12,12",
               interpolation: "RSP_NearestNeighbor",
               f: "json"
             }
           }).then(samplesResponse => {
             //console.info("getSamples: ", layer.title, nullFeatures.length);

             const samples = samplesResponse.data.samples;
             const samplesByIndex = samples.reduce((list, sample) => {
               return list.set(sample.locationId, sample);
             }, new Map());

             const updatedFeatureInfos = nullFeatures.map((nullFeature, nullFeatureIdx) => {
               const sample = samplesByIndex.get(nullFeatureIdx);
               return {
                 attributes: {
                   "OBJECTID": nullFeature.attributes.OBJECTID,
                   "water_level": sample ? Number(sample.value) : -1
                 }
               }
             });

             return layer.applyEdits({ updateFeatures: updatedFeatureInfos }).then(applyEditsResults => {
               return applyEditsResults.updateFeatureResults.map(updatedFeature => {
                 return updatedFeature.objectId;
               });
             });

           }, (error) => {
             //console.error("Error getSamples: ", layer.title, nullFeatures.length, error);

             const updatedFeatureInfos = nullFeatures.map((nullFeature, nullFeatureIdx) => {
               return {
                 attributes: {
                   "OBJECTID": nullFeature.attributes.OBJECTID,
                   "water_level": -1
                 }
               }
             });

             return layer.applyEdits({ updateFeatures: updatedFeatureInfos }).then(applyEditsResults => {
               return applyEditsResults.updateFeatureResults.map(updatedFeature => {
                 return updatedFeature.objectId;
               });
             });
           });
         };

       });
     } else {
       return promiseUtils.resolve();
     }
   }*/
